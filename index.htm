<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Basic WebGl Demo - MT</title>
    <meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <style>
      * { margin: 0; overflow: hidden; }
    </style>
	</head>
	<body>
		<script src="./lib/three.js"></script>
		<script src="./lib/OBJLoader.js"></script>
		<script>
      function Player(xCoord, yCoord, zCoord, rotation) {
				this.x = xCoord;
				this.y = yCoord;
				this.z = zCoord;
				this.velocity = 0;
				this.lap = 1;
				this.rotation = rotation;
				this.chaseCamera = false;
				this.checkpoint = false;
				this.keyDown = {
					w:false,
					a:false,
					s:false,
					d:false
				};
				this.rayPositions = {
					frontL:[0,10,0,-20],
					frontR:[12,10,0,20],
					rearL:[0,10,12,200],
					rearR:[12,10,12,160]
				};
				this.model = {
					carModel:null
				};
				this.makeHitRays = function() {
					let count = 0;
					Object.entries(this.rayPositions).forEach(function(entry) {
						let cast = new THREE.Raycaster();
						cast.ray.origin.set(entry[1][0],entry[1][1]+1110,entry[1][2]);
						cast.ray.direction.set( 0, - 1, 0 );
						let hit = cast.intersectObject(gameEnvironment.track, true);
						entry[1][0] = p1.x + 14 * Math.cos(toRadians(entry[1][3]-p1.rotation));
						entry[1][2] = p1.z + 14 * Math.sin(toRadians(entry[1][3]-p1.rotation));
						if(hit[0] == undefined) count++
					});
					if (count == 4 && p1.y > -780 || p1.y < -90 && p1.y > -780){
						p1.y += -5;
					}
				};
				this.positionCalculations = () => {
					this.x += (this.velocity) * Math.cos(toRadians(-this.rotation));
					this.z += (this.velocity) * Math.sin(toRadians(-this.rotation));
					if (this.keyDown.w == true) this.velocity += 0.02;
					if (this.keyDown.s == true && this.velocity > -1) this.velocity += -0.01;
					if (this.keyDown.a == true && this.velocity > 0.1 || this.keyDown.d == true && this.velocity < -0.1 ) this.rotation++;
					if (this.keyDown.d == true && this.velocity > 0.1 || this.keyDown.a == true && this.velocity < -0.1) this.rotation--;
					if (this.velocity > 0 && this.keyDown.w != true) this.velocity += -0.04;
				};
			};

			let p1 = new Player(220, -76,163, 180);

      let loader  = new THREE.LoadingManager(()=>{
        gameEnvironment.track.traverse( function ( child ) {
          gameEnvironment.scene.add(gameEnvironment.track);
          gameEnvironment.track.position.set(50,540,-1160);
          gameEnvironment.track.scale.set(25,25,25);
        });
        p1.model.carModel.traverse( function ( child ) {
          if ( child.isMesh ) child.material.color.setHex( 0xff0000 );
          gameEnvironment.scene.add(p1.model.carModel);
        });
        p1.model.carModel.add( gameEnvironment.frontWheel);
        p1.model.carModel.add( gameEnvironment.rearWheel );
        gameEnvironment.renderer.setAnimationLoop( render );
      });
      
      let gameEnvironment = {
        textureLoader : new THREE.TextureLoader( loader ),
        camera : new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 0.1, 1500 ),
        scene : new THREE.Scene(),
				renderer : new THREE.WebGLRenderer( { antialias: true } ),
        loader : new THREE.OBJLoader( loader ),
        geometry : new THREE.CylinderGeometry( 2, 2, 15 , 16 ),
			  material : new THREE.MeshBasicMaterial( {color: 0x000} ),
        lights: [
          [new THREE.PointLight( 0xffffff,1, 5155 ),[1440,1222,0]],
          [new THREE.PointLight( 0xffffff,1, 6155 ),[-540,1222,440]],
          [new THREE.HemisphereLight( 0xfff0f0, 0x606066, 0.2 ),[1,1,1]]
        ],
        setup: function () {
					this.waterInstance = new THREE.Mesh(new THREE.BoxGeometry(12552.5, 2.5, 12552.5));
          this.waterInstance.position.set(0,-650,0);
          this.waterInstance.material.transparent=true;
          this.waterInstance.material.opacity=0.9;
          this.waterInstance.material.color.setHex( 0x0000ff );
          this.waterInstance.material.map = this.textureLoader.load( 'water.jpg' , texture => {
            texture.wrapS = texture.wrapT = THREE.RepeatWrapping
            texture.offset.set( 0, 0 );
            texture.repeat.set( 16, 16 );
          });
          this.scene.add(this.waterInstance);
          this.scene.background = new THREE.Color( 0x3fb8ff );
          this.rearWheel = new THREE.Mesh( this.geometry, this.material );
          this.rearWheel.rotation.x = toRadians(90);
          this.rearWheel.position.set(-9,1.5,0.3);
			    this.frontWheel = new THREE.Mesh( this.geometry, this.material );
          this.frontWheel.rotation.x = toRadians(90);
          this.frontWheel.position.set(7,1.5,0.3);
          this.lights.forEach((light) => {
            light[0].position.set(light[1][0],light[1][1],light[1][2]);
            this.scene.add(light[0]);
          });
          this.loader.load( './car.obj', obj => p1.model.carModel = obj);
		  	  this.loader.load( './track.obj', obj => this.track = obj);
          this.renderer.setPixelRatio( window.devicePixelRatio );
          this.renderer.setSize( window.innerWidth, window.innerHeight );
          document.body.appendChild( this.renderer.domElement );
        },
			};

      gameEnvironment.setup();

      function render() {
        p1.model.carModel.rotation.y = toRadians(p1.rotation);
        p1.model.carModel.position.set(p1.x, p1.y, p1.z);
        p1.makeHitRays();
        p1.positionCalculations();
        if (p1.chaseCamera) {
          p1.model.carModel.add( gameEnvironment.camera );
          gameEnvironment.camera.lookAt(p1.x,p1.y+20,p1.z);
        } else {
          p1.model.carModel.remove( gameEnvironment.camera );
          gameEnvironment.camera.position.set(p1.x+200,p1.y+400,p1.z);
          gameEnvironment.camera.lookAt(p1.x,p1.y+20,p1.z);
        }
        gameEnvironment.renderer.render( gameEnvironment.scene, gameEnvironment.camera );
      }

      function key(event) {
        let down;
        event.type == "keydown" ? down = true : down = false;
        switch (event.key) {
          case "W":case "w": 
            p1.keyDown.w = down;
            break;
          case "A":case "a": 
            p1.keyDown.a = down;
            break;
          case "S":case "s": 
            p1.keyDown.s = down;
            break;
          case "D":case "d": 
            p1.keyDown.d = down;
            break;
          case "C":case "c":
            if (!down) {
              if (p1.chaseCamera) {
                p1.chaseCamera = false;
              } else {
                p1.chaseCamera = true;
                gameEnvironment.camera.position.set(-100,20,0);
              } 
            }
        }
      }

      function toRadians (angle) {
        return angle * (Math.PI / 180);
      }

      document.addEventListener("keyup", key);
      document.addEventListener("keydown", key);
  </script>
</body>
</html>
